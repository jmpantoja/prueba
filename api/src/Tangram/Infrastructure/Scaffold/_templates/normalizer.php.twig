{% import 'partials/macros.php.twig' as _ %}
{% include 'partials/header.php.twig' %}

{{ _.use(valueObject) }}
use Exception;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

final class {{ target | short_name }} implements NormalizerInterface, DenormalizerInterface {

/**
* @param {{ valueObject | short_name }} {{ valueObject | var_name }}
* @param string|null $format
* @param array $context
* @return mixed
*/
public function normalize({{ valueObject | var_name }}, string $format = null, array $context = [])
{
{% if target.composed %}
    return [
    {% for attribute in target.attributes %}
        {{ attribute.name | add_quotes }} => {{ valueObject | var_name }}->{{ attribute | key_name }}(),
    {% endfor %}
    ];
{%- else -%}
    {% set mode = target.toSingleScalar %}
    {%- if mode == 'string' -%}
        return (string){{ valueObject | var_name }};
    {%- elseif mode == 'int' -%}
        return {{ valueObject | var_name }}->toInt();
    {%- else -%}
    {%- endif -%}
{%- endif -%}
}

public function supportsNormalization($data, string $format = null)
{
return $data instanceof {{ valueObject | short_name }};
}

public function denormalize($data, string $type, string $format = null, array $context = [])
{

{% if target.composed %}
    return new {{ valueObject | short_name }}(...$data);
{%- else -%}
    {% set mode = target.toSingleScalar %}
    {%- if mode == 'string' -%}
        return new {{ valueObject | short_name }} ($data);
    {%- elseif mode == 'int' -%}
        return new {{ valueObject | short_name }}((int) $data);
    {%- else -%}
    {%- endif -%}
{%- endif -%}

}

public function supportsDenormalization($data, string $type, string $format = null)
{
return $type === {{ valueObject | short_name }}::class;
}
}
